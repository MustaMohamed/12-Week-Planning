{"version":3,"sources":["app/types/routes/index.ts","app/components/Layout/Navbar.tsx","app/components/Layout/Layout.tsx","app/components/PlansList/PlansList.tsx","app/router/index.ts","app/Application.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RouteNames","routes","Object","keys","filter","r","Base","authNavs","Navbar","activeItem","setActiveItem","useState","Home","handleItemClick","e","name","Menu","pointing","secondary","Container","fluid","map","item","idx","Item","as","Link","to","active","key","onClick","position","Layout","props","children","PlansList","Component","constructor","super","this","state","plans","response","fetch","data","json","console","log","setState","plan","durationInWeeks","startingDate","Date","startingDateUtc","createdByUser","render","Placeholder","Line","Table","celled","Header","Row","HeaderCell","Body","Cell","toLocaleDateString","AppRoutes","Name","Path","Exact","Secret","About","Plans","routeName","Application","values","route","exact","AppRouter","path","component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc5c8e4e.chunk.js","sourcesContent":["import { ReactNode } from 'react';\r\n\r\nexport enum RouteNames {\r\n  Base = '/',\r\n  Home = '/home',\r\n  About = '/about',\r\n  Plans = '/plans',\r\n}\r\n\r\nexport type AppRouteDetails = {\r\n  Name: string;\r\n  Path: string | string[];\r\n  Exact: boolean;\r\n  Secret: boolean;\r\n  Component?: ReactNode\r\n}\r\n\r\nexport type GetRouteDetails = (routeName: RouteNames) => AppRouteDetails;\r\n","import React, { FC, SyntheticEvent, useState } from 'react';\r\nimport { Container, Menu, StrictMenuItemProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { RouteNames } from '../../types/routes';\r\n\r\nconst routes: string[] = Object.keys(RouteNames).filter(r => RouteNames[r] !== RouteNames.Base);\r\nconst authNavs: string[] = ['login', 'signup'];\r\n\r\nconst Navbar: FC = () => {\r\n  const [activeItem, setActiveItem]: [string, (name: string) => void] = useState<string>(RouteNames.Home);\r\n  const handleItemClick = (e: SyntheticEvent, { name }: StrictMenuItemProps) => setActiveItem(name || RouteNames.Home);\r\n  return (\r\n    <Menu pointing secondary>\r\n      <Container fluid>\r\n        {routes && routes.map((item, idx) =>\r\n          <Menu.Item\r\n            as={Link}\r\n            to={RouteNames[item]}\r\n            name={item}\r\n            active={activeItem === item}\r\n            key={idx}\r\n            onClick={handleItemClick}\r\n          />)\r\n        }\r\n        {\r\n          authNavs && <Menu.Menu position='right'>\r\n            {authNavs.map((item, idx) =>\r\n              <Menu.Item\r\n                name={item}\r\n                active={activeItem === item}\r\n                key={idx}\r\n                onClick={handleItemClick}\r\n              />)}\r\n          </Menu.Menu>\r\n        }\r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import React, { FC } from 'react';\r\nimport Navbar from './Navbar';\r\n\r\nconst Layout: FC = (props) => {\r\n  return (\r\n    <>\r\n      <Navbar/>\r\n      {props.children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;","import React, { Component } from 'react';\r\nimport { Container, Placeholder, Table } from 'semantic-ui-react';\r\n\r\ntype Props = {\r\n\r\n}\r\n\r\ntype State = {\r\n  plans: any[];\r\n}\r\n\r\nclass PlansList extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      plans: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount(): Promise<void> {\r\n    const response = await fetch('/api/plans');\r\n    const data: any[] = await response.json();\r\n    console.log(data);\r\n    this.setState({\r\n      plans: data.map((plan, idx) => ({\r\n        name: plan.name,\r\n        durationInWeeks: plan.durationInWeeks,\r\n        startingDate: new Date(plan.startingDateUtc),\r\n        createdByUser: plan.createdByUser.name,\r\n      })),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        {!this.state.plans && <Placeholder>\r\n            <Placeholder.Line/>\r\n            <Placeholder.Line/>\r\n            <Placeholder.Line/>\r\n            <Placeholder.Line/>\r\n            <Placeholder.Line/>\r\n        </Placeholder>}\r\n        {this.state.plans && <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Plan Name</Table.HeaderCell>\r\n                    <Table.HeaderCell>Starting Date</Table.HeaderCell>\r\n                    <Table.HeaderCell>Duration In Weeks</Table.HeaderCell>\r\n                    <Table.HeaderCell>Created By User</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n              {this.state.plans.map((plan, idx) =>\r\n                <Table.Row key={idx}>\r\n                  <Table.Cell>{plan.name}</Table.Cell>\r\n                  <Table.Cell>{plan.startingDate.toLocaleDateString()}</Table.Cell>\r\n                  <Table.Cell>{plan.durationInWeeks}</Table.Cell>\r\n                  <Table.Cell>{plan.createdByUser}</Table.Cell>\r\n                </Table.Row>,\r\n              )}\r\n            </Table.Body>\r\n        </Table>}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlansList;","import { AppRouteDetails, GetRouteDetails, RouteNames } from '../types';\r\nimport { PlansList } from '../components';\r\n\r\nconst AppRoutes: { [key: string]: AppRouteDetails } = {\r\n  [RouteNames.Home]: {\r\n    Name: RouteNames.Home,\r\n    Path: [RouteNames.Base, RouteNames.Home],\r\n    Exact: true,\r\n    Secret: false,\r\n  },\r\n  [RouteNames.About]: {\r\n    Name: RouteNames.About,\r\n    Path: RouteNames.About,\r\n    Exact: false,\r\n    Secret: false,\r\n  },\r\n  [RouteNames.Plans]: {\r\n    Name: RouteNames.Plans,\r\n    Path: RouteNames.Plans,\r\n    Exact: false,\r\n    Secret: false,\r\n    Component: PlansList,\r\n  },\r\n};\r\n\r\nexport const getRouteDetails: GetRouteDetails = (routeName: RouteNames) => AppRoutes[routeName];\r\n\r\n\r\nexport default {\r\n  getRouteDetails,\r\n};","import React, { Component, ComponentClass } from 'react';\r\nimport '../semantic/dist/semantic.min.css';\r\nimport { Layout } from './components';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport AppRouter from './router';\r\nimport { RouteNames } from './types/routes';\r\n\r\nclass Application extends Component<any, any> {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Layout>\r\n          <Switch>\r\n            {Object.values(RouteNames).filter(r => r !== RouteNames.Base).map((route, idx) => {\r\n              return <Route key={idx}\r\n                            exact={AppRouter.getRouteDetails(route).Exact}\r\n                            path={AppRouter.getRouteDetails(route).Path}\r\n                            component={AppRouter.getRouteDetails(route).Component as ComponentClass}/>;\r\n            })}\r\n            <Route path={'*'}>\r\n              <h3>Not Found</h3></Route>\r\n          </Switch>\r\n        </Layout>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Application;","import React from 'react';\r\nimport Application from './app/Application';\r\n\r\nconst App = () => <Application/>;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}